// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VpcPeering Construct(VpcPeering):  Snapshot Test 1`] = `
Object {
  "Resources": Object {
    "TestPeeringF63C5812": Object {
      "Properties": Object {
        "PeerOwnerId": "111111111111",
        "PeerRegion": "us-east-1",
        "PeerRoleArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::111111111111:role/TestRole",
            ],
          ],
        },
        "PeerVpcId": "AccepterVpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test",
          },
        ],
        "VpcId": "RequesterVpc",
      },
      "Type": "AWS::EC2::VPCPeeringConnection",
    },
    "TestPeeringcrossAccountPeerRouteA647E009": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "myProviderframeworkonEventAB595BBA",
            "Arn",
          ],
        },
        "region": Object {
          "Ref": "AWS::Region",
        },
        "roleArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::111111111111:role/role",
            ],
          ],
        },
        "routeDefinition": Object {
          "DestinationCidrBlock": "10.0.0.6/32",
          "RouteTableId": "rt-3456",
          "VpcPeeringConnectionId": Object {
            "Ref": "TestPeeringF63C5812",
          },
        },
      },
      "Type": "Custom::CrossAccountRoute",
      "UpdateReplacePolicy": "Delete",
    },
    "TestPeeringvpcPeeringRoute112B3732": Object {
      "Properties": Object {
        "DestinationCidrBlock": "10.0.0.5/32",
        "RouteTableId": "rt-12345",
        "VpcPeeringConnectionId": Object {
          "Ref": "TestPeeringF63C5812",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "kmsKey3BB021CC": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "myProviderframeworkonEventAB595BBA": Object {
      "DependsOn": Array [
        "myProviderframeworkonEventServiceRoleDefaultPolicy4EAC636C",
        "myProviderframeworkonEventServiceRole94BD41C2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "REPLACED-GENERATED-NAME.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/myProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "testAF53AC38",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "myProviderframeworkonEventServiceRole94BD41C2",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "myProviderframeworkonEventServiceRole94BD41C2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "myProviderframeworkonEventServiceRoleDefaultPolicy4EAC636C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testAF53AC38",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "testAF53AC38",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "myProviderframeworkonEventServiceRoleDefaultPolicy4EAC636C",
        "Roles": Array [
          Object {
            "Ref": "myProviderframeworkonEventServiceRole94BD41C2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testAF53AC38": Object {
      "DependsOn": Array [
        "testServiceRole78466FFF",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "foo",
        },
        "Handler": "handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testServiceRole78466FFF",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "testServiceRole78466FFF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
